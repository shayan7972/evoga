/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 28 03:13:28 GMT 2018
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ib.client.Contract;
import com.ib.client.EClientErrors;
import com.ib.client.EClientSocket;
import com.ib.client.EException;
import com.ib.client.ExecutionFilter;
import com.ib.client.Order;
import com.ib.client.ScannerSubscription;
import java.io.DataInputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.SocketException;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EClientSocket_ESTest extends EClientSocket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelFundamentalData(2297);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Vector<Object> vector0 = new Vector<Object>();
      Contract contract0 = new Contract(3, "p@%[uVF[lWC~F", (String) null, "", (-1.0), "p@%[uVF[lWC~F", "com.ib.client.EClientErrors", (String) null, "p@%[uVF[lWC~F", "", vector0, "", false, "p@%[uVF[lWC~F", ",7Z!OqAY4.av>NLwA$H");
      // Undeclared exception!
      try { 
        eClientSocket0.reqFundamentalData(36, contract0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqCurrentTime();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.replaceFA(0, "  It does not supp?rt real timeQbars.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.requestFA(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqManagedAccts();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqAllOpenOrders();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelNewsBulletins();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqNewsBulletins(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqIds(3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqOpenOrders();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelOrder(3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      ExecutionFilter executionFilter0 = new ExecutionFilter(2, "{tpI7uAduwH", ";WvB69kHbs^ga)Zj", "S+R+XE8|Y9+g,H", "s!OZ (=/U", "  It does not support API scanner subscription.", "f38w{7$+Sb*");
      // Undeclared exception!
      try { 
        eClientSocket0.reqExecutions((-1744), executionFilter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqAccountUpdates(true, "com.ib.client.EClientErrors");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      Order order0 = new Order();
      // Undeclared exception!
      try { 
        eClientSocket0.placeOrder(3, contract0, order0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      // Undeclared exception!
      try { 
        eClientSocket0.exerciseOptions(3, contract0, 3, 0, "jU}+E._Q^", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelMktDepth(1228);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelMktData((byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Vector<Object> vector0 = new Vector<Object>();
      Contract contract0 = new Contract(524, "", "MK8e*ERE'Fv7v", "/NG&YcX>8ChQE:", 3, "MKT", "MK8e*ERE'Fv7v", "RgF}~.K[\"", "Couldn't connect to TWS.  Confirm that \"Enable ActiveX and Socket Clients\" is enabled on the TWS \"Configure->API\" menu.", (String) null, vector0, "RgF}~.K[\"", false, "_-Q|n.`WFvg|H", "MKT");
      // Undeclared exception!
      try { 
        eClientSocket0.reqMktDepth(341, contract0, (-1012));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      // Undeclared exception!
      try { 
        eClientSocket0.reqContractDetails(3, contract0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      // Undeclared exception!
      try { 
        eClientSocket0.reqRealTimeBars(172, contract0, 172, (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Vector<Object> vector0 = new Vector<Object>();
      Contract contract0 = new Contract(1, "", "  It does not support algo orders.", "", 2, "", "", "", "", "", vector0, "Already connected.", false, "", (String) null);
      // Undeclared exception!
      try { 
        eClientSocket0.reqHistoricalData(524, contract0, "G0]yZna\"9-2+", (String) null, (String) null, "", 53, 524);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelRealTimeBars(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelHistoricalData(2278);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      // Undeclared exception!
      try { 
        eClientSocket0.reqMktData(3, contract0, (String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      // Undeclared exception!
      try { 
        eClientSocket0.reqScannerSubscription(0, scannerSubscription0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqScannerParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelScannerSubscription(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      eClientSocket0.eDisconnect();
      assertEquals(0, eClientSocket0.serverVersion());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = EClientSocket.faMsgTypeName(36);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = EClientSocket.faMsgTypeName(2);
      assertEquals("PROFILES", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = EClientSocket.faMsgTypeName(3);
      assertNotNull(string0);
      assertEquals("ALIASES", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = EClientSocket.faMsgTypeName(1);
      assertEquals("GROUPS", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.setServerLogLevel(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set Server Log Level Sending Error - java.lang.NullPointerException [id = -1, errorCode = 521]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      int int0 = eClientSocket0.serverVersion();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.error("3<]R$_$9<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 3<]R$_$9< [id = -1, errorCode = -1]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      String string0 = eClientSocket0.TwsConnectionTime();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send('j');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqAutoOpenOrders(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      MockSocket mockSocket0 = new MockSocket();
      try { 
        eClientSocket0.createDataOutputStream(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(3, "com.ib.client.ScannerSubscription");
      EException eException0 = eClientSocket0.createEException(809, eClientErrors_CodeMsgPair0);
      assertEquals(809, eException0.getId());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.createDataInputStream((Socket) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      DataInputStream dataInputStream0 = eClientSocket0.dataInputStream();
      assertNull(dataInputStream0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.eConnect((String) null, 47, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@6916287c
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      eClientSocket0.close();
      assertEquals(2, EClientSocket.PROFILES);
  }
}
