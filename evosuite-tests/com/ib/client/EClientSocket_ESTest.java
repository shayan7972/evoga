/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 02 04:41:54 GMT 2018
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ib.client.Contract;
import com.ib.client.EClientErrors;
import com.ib.client.EClientSocket;
import com.ib.client.EException;
import com.ib.client.ExecutionFilter;
import com.ib.client.Order;
import com.ib.client.ScannerSubscription;
import com.ib.client.TagValue;
import java.io.DataInputStream;
import java.io.IOException;
import java.net.Proxy;
import java.net.SocketException;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EClientSocket_ESTest extends EClientSocket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(922, "");
      EException eException0 = eClientSocket0.createEException((-2825), eClientErrors_CodeMsgPair0);
      assertEquals((-2825), eException0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(0, "");
      EException eException0 = eClientSocket0.createEException(0, eClientErrors_CodeMsgPair0);
      assertEquals(0, eException0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair(2, "cg10&:N%tWu`{'");
      EException eException0 = eClientSocket0.createEException(4, eClientErrors_CodeMsgPair0);
      assertEquals(4, eException0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      EClientErrors.CodeMsgPair eClientErrors_CodeMsgPair0 = new EClientErrors.CodeMsgPair((-2675), "hJs");
      EException eException0 = eClientSocket0.createEException(23, eClientErrors_CodeMsgPair0);
      assertEquals(23, eException0.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send((-1371));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.error(28, 28, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  [id = 28, errorCode = 28]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.eConnect(" c&<kO~f-+bP)%?y", (-985), (-1004));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-985
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.createSocket("5<o /q`M", (-244));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-244
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.createSocket("", 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@65f2c13b
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      boolean boolean0 = eClientSocket0.isConnected();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelFundamentalData(2096);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Vector<TagValue> vector0 = new Vector<TagValue>();
      Contract contract0 = new Contract((-1459), "I@Fw(a-F[]b", "I@Fw(a-F[]b", "I@Fw(a-F[]b", (-3021.3), "0%\">tX.@Sv", "%3>uQHC|M", "%3>uQHC|M", "}Ja]!l", "EdW}('N`3&b\"sNiXj!T", vector0, " s)_5IwU-H3OJvi", false, "", "I@Fw(a-F[]b");
      // Undeclared exception!
      try { 
        eClientSocket0.reqFundamentalData(0, contract0, "EdW}('N`3&b\"sNiXj!T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqCurrentTime();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.replaceFA(98, ";X\"[R){qO9y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.requestFA(1063);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqManagedAccts();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqAllOpenOrders();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqAutoOpenOrders(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelNewsBulletins();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqNewsBulletins(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqIds(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqOpenOrders();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelOrder(295);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      ExecutionFilter executionFilter0 = new ExecutionFilter();
      // Undeclared exception!
      try { 
        eClientSocket0.reqExecutions(1636, executionFilter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqAccountUpdates(true, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Vector<Object> vector0 = new Vector<Object>(525, 525);
      Contract contract0 = new Contract(27, ">NSh<", " vEr{", "Already connected.", 2, ">NSh<", ">NSh<", "#N7lTgtX>)_Sj", "#N7lTgtX>)_Sj", "", vector0, " vEr{", true, "y!_`3+FQK0F.(%B", " vEr{");
      Order order0 = new Order();
      // Undeclared exception!
      try { 
        eClientSocket0.placeOrder(27, contract0, order0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      // Undeclared exception!
      try { 
        eClientSocket0.exerciseOptions((-51), contract0, 40, 24, (String) null, (-51));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelMktDepth((-307));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelMktData(532);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Vector<Integer> vector0 = new Vector<Integer>();
      Contract contract0 = new Contract(0, " `hm0", "  It does not support snapshot market data requests.", "amUDbDQx?6w_lr", 1.7976931348623157E308, "", "  It does not support Scale orders.", "amUDbDQx?6w_lr", "", "com.ib.client.EClientSocket", vector0, "com.ib.client.EClientSocket", true, " `hm0", "");
      // Undeclared exception!
      try { 
        eClientSocket0.reqMktDepth((-888), contract0, (-888));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      // Undeclared exception!
      try { 
        eClientSocket0.reqContractDetails(4099, contract0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Vector<TagValue> vector0 = new Vector<TagValue>();
      Contract contract0 = new Contract(2, "'GK..Yu", "'GK..Yu", "7tG<~", 1, "", "", "", "mA", "", vector0, "  It does not support what-if orders.", false, "", "");
      // Undeclared exception!
      try { 
        eClientSocket0.reqRealTimeBars((-2139), contract0, (-2139), "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelRealTimeBars(28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelHistoricalData((-2556));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Vector<Integer> vector0 = new Vector<Integer>();
      Contract contract0 = new Contract(18, "kLF|ya:<^Cb=:&", "kLF|ya:<^Cb=:&", "kLF|ya:<^Cb=:&", (-1357.7), "kLF|ya:<^Cb=:&", "", "", "kLF|ya:<^Cb=:&", "  It does not support Scale orders.", vector0, "Request Historical Data Sending Error - ", true, "Request Historical Data Sending Error - ", "");
      // Undeclared exception!
      try { 
        eClientSocket0.reqMktData(3, contract0, "1ybMj", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqScannerSubscription(Integer.MAX_VALUE, (ScannerSubscription) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.reqScannerParameters();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.cancelScannerSubscription((-2101));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      eClientSocket0.eDisconnect();
      assertEquals(0, eClientSocket0.serverVersion());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = EClientSocket.faMsgTypeName(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      int int0 = eClientSocket0.serverVersion();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.error("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // O [id = -1, errorCode = -1]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send(1616L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      String string0 = eClientSocket0.TwsConnectionTime();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send(1475.9261525397);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.send('k');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.setServerLogLevel(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set Server Log Level Sending Error - java.lang.NullPointerException [id = -1, errorCode = 521]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Contract contract0 = new Contract();
      // Undeclared exception!
      try { 
        eClientSocket0.reqHistoricalData(0, contract0, "", (String) null, (String) null, "", 1085, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not connected [id = -1, errorCode = 504]
         //
         verifyException("com.ib.client.EClientSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      MockSocket mockSocket0 = new MockSocket();
      try { 
        eClientSocket0.createDataOutputStream(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      // Undeclared exception!
      try { 
        eClientSocket0.createEException(2746, (EClientErrors.CodeMsgPair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      try { 
        eClientSocket0.createDataInputStream(mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      DataInputStream dataInputStream0 = eClientSocket0.dataInputStream();
      assertNull(dataInputStream0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      try { 
        eClientSocket0.eConnect("Request Scanner Parameter Sending Error - ", 2560, 2560);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@8a13f5f2
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EClientSocket eClientSocket0 = new EClientSocket();
      eClientSocket0.close();
      assertNull(eClientSocket0.TwsConnectionTime());
  }
}
