/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 02 04:46:21 GMT 2018
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ib.client.Order;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Order_ESTest extends Order_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_allOrNone = true;
      order1.m_permId = 3;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 3;
      order1.m_notHeld = true;
      order1.equals(order0);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order0.equals((Object)order1));
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 2731;
      order0.m_outsideRth = true;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_triggerMethod = Integer.MAX_VALUE;
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-1480);
      order0.m_displaySize = (-867);
      Order order1 = new Order();
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-1480);
      order0.m_displaySize = (-867);
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 98;
      order1.m_parentId = 98;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Order order0 = new Order();
      order0.m_ocaType = 471;
      order0.m_permId = 471;
      Order order1 = new Order();
      boolean boolean0 = order0.equals(order1);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertTrue(order1.m_transmit);
      assertFalse(boolean0);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order1.equals((Object)order0));
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Order order0 = new Order();
      order0.m_auxPrice = 1.7976931348623157E308;
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_permId = Integer.MAX_VALUE;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_lmtPrice = 1.7976931348623157E308;
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_totalQuantity = (-1521);
      order1.m_permId = 3;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_totalQuantity = (-1521);
      order1.m_permId = 3;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_orderId = 2;
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_origin = (-315);
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Order order0 = new Order();
      boolean boolean0 = order0.equals(order0);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertTrue(order0.m_transmit);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertTrue(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 2731;
      order1.m_algoStrategy = "-%t[p]1Y7sA)W";
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_clearingAccount = "S&Ye]KP~t#";
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_settlingFirm = "7L'qGbAu+zRo";
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_account = "7L'qGbAu+zRo";
      order1.m_permId = (int) 'y';
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_designatedLocation = "}Cx#<@d].:#qk[..";
      order1.m_permId = (int) 'y';
      boolean boolean0 = order0.equals(order1);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Order order0 = new Order();
      order0.m_openClose = null;
      order0.m_permId = 2731;
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order0.equals((Object)order1));
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_faPercentage = "_/DX:c6J;W&]g";
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 2731;
      order1.m_goodAfterTime = "7L'qGbAu+zRo";
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Order order0 = new Order();
      order0.m_orderRef = "7L'qGbAu+zRo";
      order0.m_permId = 2731;
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(order0.equals((Object)order1));
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(boolean0);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = 2731;
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_ocaGroup = "O";
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertTrue(order1.equals((Object)order0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Order order0 = new Order();
      order0.m_scalePriceIncrement = 1.0;
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_permId = 3;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_scaleSubsLevelSize = 0;
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 3;
      order1.m_scaleInitLevelSize = (int) 'f';
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_basisPointsType = 1386;
      order1.m_permId = 3;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_basisPoints = (double) Integer.MAX_VALUE;
      order1.m_permId = 3;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_deltaNeutralAuxPrice = (double) 0;
      order1.m_permId = 3;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_referencePriceType = 2139;
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 3;
      order0.m_continuousUpdate = 2272;
      order1.equals(order0);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order0.equals((Object)order1));
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 2731;
      order0.m_volatilityType = (-530);
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 2731;
      order1.m_volatility = 3424.4;
      order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = 2731;
      Order order1 = new Order();
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      
      order1.m_stockRangeUpper = (double) 0;
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 2731;
      order1.m_delta = (double) 2139;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = 471;
      Order order1 = new Order();
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      
      order1.m_stockRefPrice = (-1671.3012);
      boolean boolean0 = order0.equals(order1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 2731;
      order1.m_startingPrice = (-1671.3012);
      boolean boolean0 = order0.equals(order1);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = 2731;
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_auctionStrategy = 63;
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_nbboPriceCap = (double) 0;
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertFalse(boolean0);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Order order0 = new Order();
      order0.m_firmQuoteOnly = true;
      order0.m_permId = 471;
      Order order1 = new Order();
      order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Order order0 = new Order();
      order0.m_discretionaryAmt = (-1671.0);
      order0.m_permId = 471;
      Order order1 = new Order();
      boolean boolean0 = order0.equals(order1);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_shortSaleSlot = 1;
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_trailStopPrice = 1567.8423753;
      order1.m_permId = (-1);
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 2731;
      order1.m_percentOffset = (-259.0);
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 98;
      order0.m_minQty = (-1);
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_allOrNone = true;
      order1.m_permId = 3;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 2731;
      order1.m_overridePercentageConstraints = true;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_hidden = true;
      order1.m_permId = (int) 'f';
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = (int) 'f';
      order0.m_outsideRth = true;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 2731;
      order1.m_triggerMethod = 1;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_sweepToFill = true;
      order1.m_permId = 2731;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_blockOrder = true;
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_parentId = 56;
      order1.m_permId = Integer.MAX_VALUE;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_permId = 2731;
      order0.m_transmit = false;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = 2731;
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_ocaType = (-2044);
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'y';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_auxPrice = 109.0;
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Order order0 = new Order();
      order0.m_lmtPrice = (-1671.3012);
      order0.m_permId = 471;
      Order order1 = new Order();
      boolean boolean0 = order0.equals(order1);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.equals((Object)order0));
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Order order0 = new Order();
      order0.m_clientId = 2;
      order0.m_permId = 2731;
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertTrue(order1.m_transmit);
      assertFalse(order0.equals((Object)order1));
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_orderId = 3008;
      order1.m_permId = 2731;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      boolean boolean0 = order0.equals(order1);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertTrue(boolean0);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Order order0 = new Order();
      boolean boolean0 = order0.equals((Object) null);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Order order0 = new Order();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        order0.equals(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to com.ib.client.Order
         //
         verifyException("com.ib.client.Order", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_action = "Sk=&WrODHYR@3pDb10";
      order1.m_permId = 3;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }
}
