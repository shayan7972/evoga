/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 28 03:15:06 GMT 2018
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ib.client.Order;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Order_ESTest extends Order_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Order order0 = new Order();
      Vector<String> vector0 = new Vector<String>();
      order0.m_algoParams = vector0;
      vector0.add("");
      order0.m_permId = (int) 'n';
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
      assertFalse(order0.equals((Object)order1));
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Order order0 = new Order();
      order0.m_algoStrategy = "&+x}1s%K";
      order0.m_permId = (int) '?';
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(order0.equals((Object)order1));
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) '?';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_clearingIntent = "O";
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) '?';
      order0.m_clearingAccount = "O";
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order0.equals((Object)order1));
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) '?';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_settlingFirm = "$";
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'b';
      order0.m_account = "L3h<{bmPluc";
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order0.equals((Object)order1));
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'm';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_deltaNeutralOrderType = "O";
      boolean boolean0 = order0.equals(order1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) '?';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_designatedLocation = "com.ib.client.Util";
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Order order0 = new Order();
      order0.m_openClose = null;
      order0.m_permId = (-377);
      Order order1 = new Order();
      boolean boolean0 = order0.equals(order1);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Order order0 = new Order();
      order0.m_faPercentage = "h?O/yj+i";
      order0.m_permId = Integer.MAX_VALUE;
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order0.equals((Object)order1));
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'b';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_faMethod = "gvNWhwOG{VueGt0/";
      order1.equals(order0);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = Integer.MAX_VALUE;
      order0.m_faProfile = "O";
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order0.equals((Object)order1));
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) '?';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_faGroup = "`>20 @v298>rV";
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'n';
      order0.m_rule80A = "com.ib.client.Util";
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'f';
      order0.m_goodTillDate = "zd;0VCb";
      Order order1 = new Order();
      order0.equals(order1);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(order1.equals((Object)order0));
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'y';
      order0.m_goodAfterTime = "QqlcY9)s";
      Order order1 = new Order();
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertTrue(order1.m_transmit);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Order order0 = new Order();
      order0.m_orderRef = ">Ag4NL}";
      order0.m_permId = (-377);
      Order order1 = new Order();
      order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'c';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_ocaGroup = "com.ib.client.Util";
      order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Order order0 = new Order();
      order0.m_tif = "com.ib.client.Order";
      order0.m_permId = (int) 'b';
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Order order0 = new Order();
      order0.m_orderType = "Zye-$FWb1%Q1BeQ}T-X";
      order0.m_permId = Integer.MAX_VALUE;
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertFalse(boolean0);
      assertFalse(order0.equals((Object)order1));
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'b';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_action = "com.ib.client.Util";
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Order order0 = new Order();
      order0.m_whatIf = true;
      order0.m_permId = Integer.MAX_VALUE;
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order0.equals((Object)order1));
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = Integer.MAX_VALUE;
      order0.m_scalePriceIncrement = (-377.0);
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertFalse(order0.equals((Object)order1));
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Order order0 = new Order();
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      
      order0.m_scaleSubsLevelSize = (-10);
      order0.m_permId = (int) 'b';
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-377);
      Order order1 = new Order();
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      
      order1.m_scaleInitLevelSize = 0;
      boolean boolean0 = order0.equals(order1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Order order0 = new Order();
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      
      order0.m_permId = Integer.MAX_VALUE;
      order0.m_basisPoints = (double) (-3857);
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Order order0 = new Order();
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      
      order0.m_permId = (int) 'b';
      order0.m_deltaNeutralAuxPrice = (-1924.0);
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'b';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order0.m_referencePriceType = 1;
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = Integer.MAX_VALUE;
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_continuousUpdate = 63;
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Order order0 = new Order();
      order0.m_volatility = (double) (-3857);
      order0.m_permId = (-377);
      Order order1 = new Order();
      boolean boolean0 = order0.equals(order1);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(order1.equals((Object)order0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-377);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_stockRangeUpper = (double) 0;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = Integer.MAX_VALUE;
      order0.m_stockRangeLower = 0.0;
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order0.equals((Object)order1));
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'b';
      order0.m_delta = (-2188.952);
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(order0.equals((Object)order1));
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-377);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_stockRefPrice = 1147.666214238455;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-377);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_startingPrice = (-1700.01010795);
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) '?';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_auctionStrategy = Integer.MAX_VALUE;
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Order order0 = new Order();
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      
      order0.m_nbboPriceCap = 552.4606329;
      order0.m_permId = Integer.MAX_VALUE;
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'c';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_firmQuoteOnly = true;
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order1.m_discretionaryAmt = 2381.8;
      order0.m_permId = Integer.MAX_VALUE;
      boolean boolean0 = order1.equals(order0);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-377);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_shortSaleSlot = 1;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) '?';
      order0.m_trailStopPrice = 1.0;
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-369);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_percentOffset = (double) Integer.MAX_VALUE;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Order order0 = new Order();
      order0.m_minQty = (-3857);
      order0.m_permId = (-377);
      Order order1 = new Order();
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = Integer.MAX_VALUE;
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order0.m_allOrNone = true;
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'b';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_overridePercentageConstraints = true;
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-377);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order0.m_hidden = true;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) '?';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_outsideRth = true;
      boolean boolean0 = order0.equals(order1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'b';
      order0.m_triggerMethod = (-1081);
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order0.equals((Object)order1));
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-377);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order0.m_displaySize = 63;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Order order0 = new Order();
      order0.m_sweepToFill = true;
      order0.m_permId = (int) 'n';
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = Integer.MAX_VALUE;
      order0.m_blockOrder = true;
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertFalse(order0.equals((Object)order1));
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_outsideRth);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = Integer.MAX_VALUE;
      order0.m_parentId = (-2415);
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertFalse(order0.equals((Object)order1));
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = Integer.MAX_VALUE;
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_transmit = false;
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) 'b';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_ocaType = (-1177);
      boolean boolean0 = order1.equals(order0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (int) '?';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_auxPrice = 1.7976931348623157E308;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Order order0 = new Order();
      order0.m_lmtPrice = (-3816.17970551);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_permId = Integer.MAX_VALUE;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Order order0 = new Order();
      order0.m_totalQuantity = (-369);
      order0.m_permId = (int) 'b';
      Order order1 = new Order();
      boolean boolean0 = order1.equals(order0);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertFalse(order0.equals((Object)order1));
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-377);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order0.m_clientId = (-62);
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Order order0 = new Order();
      order0.m_permId = (-463);
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      
      order1.m_orderId = Integer.MAX_VALUE;
      boolean boolean0 = order0.equals(order1);
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.m_permId = Integer.MAX_VALUE;
      boolean boolean0 = order1.equals(order0);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertTrue(order0.equals((Object)order1));
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.equals(order1);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Order order0 = new Order();
      boolean boolean0 = order0.equals((Object) null);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
  }
}
