/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 02 04:38:59 GMT 2018
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ib.client.ScannerSubscription;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScannerSubscription_ESTest extends ScannerSubscription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.stockTypeFilter("J&LZ?RNs(");
      scannerSubscription0.stockTypeFilter();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.stockTypeFilter("");
      scannerSubscription0.stockTypeFilter();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.spRatingBelow("p5xWE#MN,VgquxpoOd");
      scannerSubscription0.spRatingBelow();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.spRatingBelow("");
      scannerSubscription0.spRatingBelow();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.spRatingAbove("|aX:g*${");
      scannerSubscription0.spRatingAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.spRatingAbove("");
      scannerSubscription0.spRatingAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.scannerSettingPairs("uE3g[MnY^vSES5D2");
      scannerSubscription0.scannerSettingPairs();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.scannerSettingPairs("");
      scannerSubscription0.scannerSettingPairs();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.scanCode("EEDe");
      scannerSubscription0.scanCode();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.scanCode("");
      scannerSubscription0.scanCode();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.numberOfRows(1784);
      int int0 = scannerSubscription0.numberOfRows();
      assertEquals(1784, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.moodyRatingBelow("");
      scannerSubscription0.moodyRatingBelow();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.moodyRatingAbove(":TmQzw");
      scannerSubscription0.moodyRatingAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.moodyRatingAbove("");
      scannerSubscription0.moodyRatingAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.maturityDateBelow("jRfT/9G");
      scannerSubscription0.maturityDateBelow();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.maturityDateBelow("");
      scannerSubscription0.maturityDateBelow();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.maturityDateAbove(" Xl =H|Ekl3v mB");
      scannerSubscription0.maturityDateAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.maturityDateAbove("");
      scannerSubscription0.maturityDateAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      
      scannerSubscription0.marketCapBelow(0.0);
      double double0 = scannerSubscription0.marketCapBelow();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.marketCapBelow((-1021.269635634654));
      double double0 = scannerSubscription0.marketCapBelow();
      assertEquals((-1021.269635634654), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.marketCapAbove((-2865.438706965));
      double double0 = scannerSubscription0.marketCapAbove();
      assertEquals((-2865.438706965), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.locationCode("> ,-^J>--agN|zB");
      scannerSubscription0.locationCode();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.instrument("> ,-^J>--agN|zB");
      scannerSubscription0.instrument();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.instrument("");
      scannerSubscription0.instrument();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.excludeConvertible("~z*)vP{!N(#");
      scannerSubscription0.excludeConvertible();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.excludeConvertible("");
      scannerSubscription0.excludeConvertible();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      
      scannerSubscription0.couponRateBelow(0.0);
      double double0 = scannerSubscription0.couponRateBelow();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.couponRateBelow((-147.4998578960153));
      double double0 = scannerSubscription0.couponRateBelow();
      assertEquals((-147.4998578960153), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      
      scannerSubscription0.couponRateAbove(0.0);
      double double0 = scannerSubscription0.couponRateAbove();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      
      scannerSubscription0.couponRateAbove((-1.0));
      double double0 = scannerSubscription0.couponRateAbove();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      
      scannerSubscription0.belowPrice(0.0);
      double double0 = scannerSubscription0.belowPrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.belowPrice((double) (-65));
      double double0 = scannerSubscription0.belowPrice();
      assertEquals((-65.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      
      scannerSubscription0.averageOptionVolumeAbove(0);
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      
      scannerSubscription0.aboveVolume((-1));
      int int0 = scannerSubscription0.aboveVolume();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      
      scannerSubscription0.abovePrice(0.0);
      double double0 = scannerSubscription0.abovePrice();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.abovePrice((-946.061));
      double double0 = scannerSubscription0.abovePrice();
      assertEquals((-946.061), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      
      scannerSubscription0.marketCapAbove(0.0);
      double double0 = scannerSubscription0.marketCapAbove();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.averageOptionVolumeAbove((-108));
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertEquals((-108), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      double double0 = scannerSubscription0.couponRateBelow();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      double double0 = scannerSubscription0.couponRateAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.spRatingBelow();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.maturityDateAbove();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      double double0 = scannerSubscription0.marketCapAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      double double0 = scannerSubscription0.marketCapBelow();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.moodyRatingBelow("com.ib.client.ScannerSubscription");
      scannerSubscription0.moodyRatingBelow();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.spRatingAbove();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.scannerSettingPairs();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.locationCode("");
      scannerSubscription0.locationCode();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.excludeConvertible();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      int int0 = scannerSubscription0.aboveVolume();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      int int0 = scannerSubscription0.numberOfRows();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), int0);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.scanCode();
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.moodyRatingAbove();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      
      scannerSubscription0.aboveVolume(0);
      int int0 = scannerSubscription0.aboveVolume();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.moodyRatingBelow();
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.locationCode();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      assertEquals((-1), scannerSubscription0.numberOfRows());
      
      scannerSubscription0.numberOfRows(0);
      int int0 = scannerSubscription0.numberOfRows();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      double double0 = scannerSubscription0.abovePrice();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.stockTypeFilter();
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.instrument();
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      int int0 = scannerSubscription0.averageOptionVolumeAbove();
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      scannerSubscription0.maturityDateBelow();
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(1.7976931348623157E308, scannerSubscription0.belowPrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ScannerSubscription scannerSubscription0 = new ScannerSubscription();
      double double0 = scannerSubscription0.belowPrice();
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.averageOptionVolumeAbove());
      assertEquals(Integer.MAX_VALUE, scannerSubscription0.aboveVolume());
      assertEquals((-1), scannerSubscription0.numberOfRows());
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateAbove(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.abovePrice(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.couponRateBelow(), 0.01);
      assertEquals(1.7976931348623157E308, scannerSubscription0.marketCapAbove(), 0.01);
  }
}
